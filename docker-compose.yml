version: '3'
services:
  flask-app:
    container_name: flask-app
    build:
      context: ./  # Replace with the path to your Flask app
      dockerfile: ./back_python/Dockerfile
    ports:
      - "5000:5000"  # Expose the Gunicorn port
    volumes:
      - data:/tmp/images
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - FLASK_DEBUG=1
    depends_on:
      - db
    networks:
      - app-network

  flutter-app:
    container_name: flutter-app
    build:
      context: ./front_flutter  # Replace with the path to your Flask app
    ports:
      - "8080:80"  # Expose the Flutter web app port
    volumes:
      - web-volume:/app/build/web  # Mount the volume from the Flutter container to /var/www/html
    depends_on:
      - flask-app
    networks:
      - app-network

  db:
    image: postgres:latest
    environment:
      POSTGRES_DB: fullcloset
      POSTGRES_USER: gur
      POSTGRES_PASSWORD: lemotdepassesecret!!-678
    ports:
      - "5432:5432"  # Expose the Gunicorn port

    volumes:
      - postgres-data:/var/lib/postgresql/data
      - /home/debian/Closet-App/magic_closet/postgres_config/postgresql.conf:/etc/postgresql/postgresql.conf  # Mount custom config
    networks:
      - app-network

  nginx:
    container_name: nginx
    image: nginx:mainline-alpine
    ports:
      - "443:443"
      - "80:80"  # Expose Nginx on port 80
    volumes:
      - ./nginx-config:/etc/nginx/conf.d
      - web-volume:/var/www/html
      - ./privacy-policy.html:/var/www/html/privacy-policy.html:ro
      - ./suppress_account.html:/var/www/html/suppress_account.html:ro
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - dhparam:/etc/ssl/certs
    depends_on:
      - flutter-app
    networks:
      - app-network

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - web-volume:/var/www/html
    depends_on:
      - nginx

  mosquitto:
      container_name: mosquitto
      image: eclipse-mosquitto:latest
      ports:
          - 1883:1883
          - 8883:8883
          - 9001:9001
      volumes:
          - ./mosquitto/config:/mosquitto/config
          - ./mosquitto/data:/mosquitto/data
          - ./mosquitto/config/passwd:/mosquitto/config/passwd
      networks:
          - app-network

  parser_mqtt:
    container_name: parser_mqtt
    build:
      context: ./  # Replace with the path to your Flask app
      dockerfile: ./mos/Dockerfile
    depends_on:
      - db
      - mosquitto
    networks:
      - app-network

  json_exporter:
    image: quay.io/prometheuscommunity/json-exporter
    restart: always
    container_name: json_exporter
    volumes:
      - ./json-exporter/config.yml:/config.yml:ro
    ports:
      - 7979:7979

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    restart: always
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090

  grafana:
    container_name: grafana
    image: grafana/grafana:master 
    restart: always
    volumes:
            - ./grafana/grafana.ini:/etc/grafana/grafana.ini
            - ./grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yaml
            - mygraph:/var/lib/grafana
    environment:
      - GF_SERVER_DOMAIN=www.terjack.space
      - GF_SERVER_ROOT_URL=https://151.80.152.245:42/graf
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    expose:
      - 3000
    ports:
      - 3000:3000
    links:
      - prometheus

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
  certbot-etc:
  certbot-var:
  web-volume:
  data:
  mygraph:
  dhparam:
    driver: local
    driver_opts:
      type: none
      device: /home/debian/Closet-App/magic_closet/dhparam
      o: bind
