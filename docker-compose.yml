version: '3'
services:
  flask-app:
    container_name: flask-app
    build:
      context: ./  # Replace with the path to your Flask app
      dockerfile: ./back_python/Dockerfile
    ports:
      - "5000:5000"  # Expose the Gunicorn port
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - FLASK_DEBUG=1
    depends_on:
      - db
    networks:
      - app-network

  flutter-app:
    container_name: flutter-app
    build:
      context: ./front_flutter  # Replace with the path to your Flask app
    ports:
      - "8080:80"  # Expose the Flutter web app port
    #volumes:
    #    - ./front_flutter/nginx.conf:/etc/nginx/nginx.conf  # Mount your custom nginx.conf
    depends_on:
      - flask-app
    networks:
      - app-network

  db:
    image: postgres:latest
    environment:
      POSTGRES_DB: fullcloset
      POSTGRES_USER: gur
      POSTGRES_PASSWORD: lemotdepassesecret!!-678
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network

  nginx:
    image: nginx:latest  # Use the official Nginx image
    ports:
      - "80:80"  # Expose Nginx on port 80
    volumes:
      - ./nginx-config/nginx.conf:/etc/nginx/nginx.conf  # Mount your custom nginx.conf
    depends_on:
      - flutter-app
    networks:
      - app-network

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - ./front_flutter/web:/var/www/html
    depends_on:
      - nginx

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
  certbot-etc:
  certbot-var:
